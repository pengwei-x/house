<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="userServiceImpl" class="com.aop.service.UserServiceImpl"></bean>


        <bean id="userServiceProxyHandler" class="com.aop.proxy.UserServiceProxyHandler">
    <property  ref="userServiceImpl" name="userService"></property>
</bean>

    <bean id="before" class="com.aop.Before"></bean>

    <bean id="before1" class="com.aop.Before1">
    </bean>

    <aop:config>
        <aop:pointcut id="pc" expression="execution(* *(..))"/>
        <aop:advisor advice-ref="before" pointcut-ref="pc"></aop:advisor>
    </aop:config>

    <!--    <aop:config>-->
    <!--        <aop:pointcut id="pc" expression="execution(* *(..))"/>-->
    <!--        <aop:advisor advice-ref="before1" pointcut-ref="pc"></aop:advisor>-->
    <!--    </aop:config>-->


<!--    <aop:config>-->
<!--        <aop:pointcut id="pc" expression="@annotation(com.aop.annotation.Log)"/>-->
<!--        <aop:advisor advice-ref="before1" pointcut-ref="pc"></aop:advisor>-->
<!--    </aop:config>-->

    <!--proxy-target-class属性值决定是基于接口的还是基于类的代理被创建。如果proxy-target-class 属性值被设置为true
    ，那么基于类的代理将起作用（这时需要cglib库）。
    如果proxy-target-class属值被设置为false或者这个属性被省略，那么标准的JDK 基于接口的代理-->

<!--    <aop:aspectj-autoproxy proxy-target-class="true"/>-->



    <!--
        <aop:config>
            <aop:pointcut id="pc" expression="execution(* *(..))"/>
            <aop:advisor advice-ref="" pointcut-ref="pc"></aop:advisor>l
        </aop:config>
    -->

</beans>